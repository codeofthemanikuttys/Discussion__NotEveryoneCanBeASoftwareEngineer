#README

This page is a redirect from Rate My Professors.

The Bit.Ly URL for this page is the following:

http://bit.ly/2EeCL0t

In the interest of full disclosure, I asked a student to post a review for me on Rate My Professors so that I could
tell the world what the students reviewing me got wrong.

As a first step, please go through the link below:
--+--

URL: https://www.reddit.com/r/changemyview/comments/aqsrel/cmv_everyone_cannot_learn_to_code_in_a_practical/

--+--
Please note how virtually nobody can defeat the argument that Software Engineering is not something everyone can do.

Students at Hartnell College, which is a Community College in California, are generally highly underprepared 
in mathematics, but math is foundational for Computer Science. Students really should not be taking Engineering 
classes unless they have the right level of mathematical preparation. This is the basic problem. This is 
the problem with themselves that the students who are providing these comments (and we know which 
Semester and which classthey are from) are not talking about. Students in the other class were quite happy
with the course. The problem with the course from which the complaints came was this: this was a programming
class, and I found that I could not assign them lots of advanced programming work.

Please note that the GitHub link being pointed to has discussions with some of the leading thinkers in the 
world, including Amartya Sen, Noam Chomsky, Martha Nussbaum and others. This is to primarily alert you to the 
fact that this GitHub has a number of repositories, and not all of the repositories are actually related to
Hartnell College in the first place.

--+---

Here are the comments that the commenter on reddit.com/r/changemyview posted. Notice how cogently he or she
has argued his or her points.

Comments follow.
--+---

Learning to code is hard. It is one thing to learn the syntax of a language and it is another thing to
understand how a particular language is actually accomplishing its execution. I believe one must 
understand a variety of algorithms and data structures, theory, and mathematical concepts to really 
become an effective programmer. Learning a framework by following a video course online is not the same 
as gaining a thorough understanding of computer science. This is not to say that an individual cannot 
learn these things on their own, my point is that it is very difficult and unlikely for everyone to 
have the discipline to gain a thorough understanding of these concepts. Not to mention that it's not 
everybody's cup of tea.
​
Coding seems to have become glorified in a way. It's not just some genius flawlessly typing line 
after line of code that magnificently solves the problem at hand. It's a constant learning process, 
lots of the answers to the problems live in stack overflow or reddit or slack or some reference website 
for the language being used. There's lots of debugging, lots of testing, reviewing, revising, refactoring, 
etc. It's not all fun and games where you press a few keys and hack into some critical government 
mainframe. It's not always fun, and I believe it takes a certain type of person to want to push forward 
and continue hammering on a problem that someone not as passionate would continue to hammer on.
​
It seems that many people have this idea that software development is just a skill that people can 
learn and make a career out of willy nilly, but in reality, it is an entire industry made up of 
people who have worked incredibly hard to get where they are, and continue to learn every day 
to stay where they are. It's not just a skill, it is an entire set of a variety of skills including 
a particular way of thinking, just like any profession. Many of these skills are not technical. A 
software engineer is not a "code monkey" with no social skills and greasy hair, they have to be 
able to communicate effectively with colleagues, be an excellent team player, understand and deliver 
specifications provided by customers, deal with management, etc. They need to be able to understand 
the problem at hand and devise the best solution. It's not a situation where there is X problem and 
Y solution, let's start coding! There are solutions A, B, C, D..... and there are reasons one solution 
is better in some areas and worse in others. Software engineers need to think about the big picture 
and how to go about tackling it, but they also need to be able to drill into the details. Not everybody 
can do it. Not everybody can be an electrical engineer, or an accountant, or a doctor, or a journalist, 
or a geographer, either, so there's no reason to believe that becoming a software engineer is any 
different.


--+--

